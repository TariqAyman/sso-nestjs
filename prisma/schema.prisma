// =========================================================================
// PRISMA SCHEMA - COMPLETE SSO & USER MANAGEMENT SYSTEM
// =========================================================================
// This is your main Prisma schema file.
// For better readability, models are organized into logical sections.
// Separate documentation files are available in prisma/schema/ folder:
// - users.prisma: User management models
// - permissions.prisma: Permission & role management
// - oauth.prisma: OAuth & SSO integration
// - saml.prisma: SAML tenant configuration
// - microservices.prisma: Service & tenant management
// - tokens.prisma: Token & session management
// =========================================================================

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}
// =========================================================================
// 2. OAUTH & SSO INTEGRATION MODELS  
// =========================================================================
// OAuth provider integrations (Google, Facebook, Nafath, etc.)
// SSO application management and OAuth flow handling
// Documentation: prisma/schema/oauth.prisma

// SSO application registration and configuration
model SsoApplication {
    id                  String   @id @default(uuid())
    userId              BigInt   @map("user_id") @db.UnsignedBigInt
    applicationName     String   @map("application_name") @db.VarChar(255)
    applicationUrl      String   @map("application_url") @db.VarChar(500)
    clientId            String   @unique @map("client_id") @db.VarChar(255)
    clientSecret        String   @map("client_secret") @db.VarChar(255)
    redirectUri         String   @map("redirect_uri") @db.VarChar(500)
    scope               String?  @db.Text
    status              String   @default("active") @db.VarChar(50)
    allowedOrigins      String?  @map("allowed_origins") @db.Text
    tokenExpirationTime Int      @default(3600) @map("token_expiration_time")
    refreshTokenEnabled Boolean  @default(true) @map("refresh_token_enabled")
    description         String?  @db.Text
    logoUrl             String?  @map("logo_url") @db.VarChar(500)
    webhookUrl          String?  @map("webhook_url") @db.VarChar(500)
    webhookSecret       String?  @map("webhook_secret") @db.VarChar(255)
    createdAt           DateTime @default(now()) @map("created_at")
    updatedAt           DateTime @updatedAt @map("updated_at")

    // Relations
    user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    webhookLogs        LogWebhook[]
    authorizationCodes AuthorizationCode[]
    refreshTokens      RefreshToken[]

    @@map("sso_applications")
}

model Menu {
    id          String   @id @default(uuid())
    title       String   @db.VarChar(255)
    url         String   @db.VarChar(500)
    icon        String?  @db.VarChar(100)
    sortOrder   Int      @default(0) @map("sort_order")
    parentId    String?  @map("parent_id")
    status      String   @default("active") @db.VarChar(50)
    target      String   @default("_self") @db.VarChar(20)
    cssClass    String?  @map("css_class") @db.VarChar(100)
    permissions String?  @db.Text
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    // Self-referential relation
    parent   Menu?  @relation("MenuHierarchy", fields: [parentId], references: [id])
    children Menu[] @relation("MenuHierarchy")

    @@map("menus")
}

model Faq {
    id         Int      @id @default(autoincrement())
    question   String   @db.Text
    answer     String   @db.Text
    category   String?  @db.VarChar(100)
    sortOrder  Int      @default(0) @map("sort_order")
    status     String   @default("active") @db.VarChar(50)
    viewCount  Int      @default(0) @map("view_count")
    helpful    Int      @default(0)
    notHelpful Int      @default(0) @map("not_helpful")
    tags       String?  @db.Text
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    @@map("faqs")
}

// Webhook delivery tracking and logging
model LogWebhook {
    id               Int       @id @default(autoincrement())
    ssoApplicationId String    @map("sso_application_id")
    event            String    @db.VarChar(100)
    payload          String    @db.Text
    response         String?   @db.Text
    status           String    @db.VarChar(50)
    httpStatusCode   Int?      @map("http_status_code")
    attempt          Int       @default(1)
    errorMessage     String?   @map("error_message") @db.Text
    deliveredAt      DateTime? @map("delivered_at")
    nextRetryAt      DateTime? @map("next_retry_at")
    createdAt        DateTime  @default(now()) @map("created_at")

    // Relations
    ssoApplication SsoApplication @relation(fields: [ssoApplicationId], references: [id], onDelete: Cascade)

    @@map("webhook_logs")
}

// User OAuth provider connections
model OauthConnection {
    id             Int       @id @default(autoincrement())
    userId         BigInt    @map("user_id") @db.UnsignedBigInt
    provider       String    @db.VarChar(50) // google, github, facebook, twitter, microsoft
    providerId     String    @map("provider_id") @db.VarChar(255)
    email          String?   @db.VarChar(255)
    name           String?   @db.VarChar(255)
    avatar         String?   @db.VarChar(500)
    accessToken    String?   @map("access_token") @db.Text
    refreshToken   String?   @map("refresh_token") @db.Text
    tokenExpiresAt DateTime? @map("token_expires_at")
    scope          String?   @db.Text
    profileData    String?   @map("profile_data") @db.Text
    connectedAt    DateTime  @default(now()) @map("connected_at")
    lastUsedAt     DateTime? @map("last_used_at")

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, provider])
    @@map("oauth_connections")
}

// OAuth authorization codes for secure flow
model AuthorizationCode {
    id            String   @id @default(uuid())
    code          String   @unique @db.VarChar(255)
    userId        BigInt   @map("user_id") @db.UnsignedBigInt
    applicationId String   @map("application_id")
    redirectUri   String   @map("redirect_uri") @db.VarChar(500)
    scope         String   @db.VarChar(255)
    expiresAt     DateTime @map("expires_at")
    createdAt     DateTime @default(now()) @map("created_at")

    // Relations
    user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    application SsoApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    @@map("authorization_codes")
}

// OAuth refresh tokens for token renewal
model RefreshToken {
    id            String   @id @default(uuid())
    token         String   @unique @db.VarChar(255)
    userId        BigInt   @map("user_id") @db.UnsignedBigInt
    applicationId String   @map("application_id")
    scope         String   @db.VarChar(255)
    expiresAt     DateTime @map("expires_at")
    createdAt     DateTime @default(now()) @map("created_at")

    // Relations
    user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    application SsoApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

    @@map("refresh_tokens")
}

// New Models from SQL Schema

// =========================================================================
// 5. MICROSERVICE & TENANT MANAGEMENT
// =========================================================================
// Multi-tenant microservice architecture support
// Documentation: prisma/schema/microservices.prisma

// Microservice registration and configuration
model MicroService {
    id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
    name      String   @unique @db.VarChar(255)
    secretId  String   @unique @map("secret_id") @db.VarChar(40)
    secretKey String   @map("secret_key") @db.VarChar(255)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Relations
    permissions Permission[]
    roles       Role[]

    @@map("micro_services")
}

// =========================================================================
// 4. PERMISSION & ROLE MANAGEMENT
// =========================================================================
// Laravel Spatie-compatible permission system with roles and model bindings
// Documentation: prisma/schema/permissions.prisma

// System permissions definition
model Permission {
    id             BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
    name           String   @db.VarChar(255)
    guardName      String?  @map("guard_name") @db.VarChar(255)
    microServiceId BigInt?  @map("micro_service_id") @db.UnsignedBigInt
    frontend       Boolean  @default(false)
    createdAt      DateTime @default(now()) @map("created_at")
    updatedAt      DateTime @updatedAt @map("updated_at")

    // Relations
    microService        MicroService?        @relation(fields: [microServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    roleHasPermissions  RoleHasPermission[]
    modelHasPermissions ModelHasPermission[]

    @@unique([name, microServiceId])
    @@map("permissions")
}

// User roles definition
model Role {
    id             BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
    name           String   @db.VarChar(255)
    guardName      String?  @map("guard_name") @db.VarChar(255)
    microServiceId BigInt?  @map("micro_service_id") @db.UnsignedBigInt
    frontend       Boolean  @default(false)
    createdAt      DateTime @default(now()) @map("created_at")
    updatedAt      DateTime @updatedAt @map("updated_at")

    // Relations
    microService       MicroService?       @relation(fields: [microServiceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    roleHasPermissions RoleHasPermission[]
    modelHasRoles      ModelHasRole[]

    @@unique([name, microServiceId])
    @@map("roles")
}

// Role-permission associations
model RoleHasPermission {
    permissionId BigInt @map("permission_id") @db.UnsignedBigInt
    roleId       BigInt @map("role_id") @db.UnsignedBigInt

    // Relations
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([permissionId, roleId])
    @@map("role_has_permissions")
}

// Direct model-permission assignments
model ModelHasPermission {
    permissionId BigInt @map("permission_id") @db.UnsignedBigInt
    modelType    String @map("model_type") @db.VarChar(255)
    modelId      BigInt @map("model_id") @db.UnsignedBigInt

    // Relations
    permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    user       User?      @relation(fields: [modelId], references: [id], onDelete: Cascade)

    @@id([permissionId, modelId, modelType])
    @@index([modelId, modelType])
    @@map("model_has_permissions")
}

// Direct model-role assignments
model ModelHasRole {
    roleId    BigInt @map("role_id") @db.UnsignedBigInt
    modelType String @map("model_type") @db.VarChar(255)
    modelId   BigInt @map("model_id") @db.UnsignedBigInt

    // Relations
    role Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
    user User? @relation(fields: [modelId], references: [id], onDelete: Cascade)

    @@id([roleId, modelId, modelType])
    @@index([modelId, modelType])
    @@map("model_has_roles")
}

// =========================================================================
// 3. TOKEN & SESSION MANAGEMENT
// =========================================================================
// Personal access tokens and API authentication
// Documentation: prisma/schema/tokens.prisma

// Laravel Sanctum-style personal access tokens
model PersonalAccessToken {
    id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
    tokenableType String    @map("tokenable_type") @db.VarChar(255)
    tokenableId   BigInt    @map("tokenable_id") @db.UnsignedBigInt
    name          String    @db.VarChar(255)
    token         String    @unique @db.VarChar(64)
    abilities     String?   @db.Text
    lastUsedAt    DateTime? @map("last_used_at")
    expiresAt     DateTime? @map("expires_at")
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")

    // Relations
    user User? @relation(fields: [tokenableId], references: [id], onDelete: Cascade)

    @@index([tokenableType, tokenableId])
    @@map("personal_access_tokens")
}

// =========================================================================
// 6. SAML SSO CONFIGURATION
// =========================================================================
// SAML tenant configuration for enterprise SSO
// Documentation: prisma/schema/saml.prisma

// SAML tenant settings and metadata
model SamlTenantSetting {
    id            Int       @id @default(autoincrement()) @db.UnsignedInt
    uuid          String    @db.Char(36)
    key           String?   @db.VarChar(255)
    idpEntityId   String    @map("idp_entity_id") @db.VarChar(255)
    idpLoginUrl   String    @map("idp_login_url") @db.VarChar(255)
    idpLogoutUrl  String    @map("idp_logout_url") @db.VarChar(255)
    idpX509Cert   String    @map("idp_x509_cert") @db.Text
    metadata      Json
    relayStateUrl String?   @map("relay_state_url") @db.VarChar(255)
    nameIdFormat  String    @default("persistent") @map("name_id_format") @db.VarChar(255)
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")
    deletedAt     DateTime? @map("deleted_at")

    @@map("saml2_tenants")
}

// =========================================================================
// 7. QUEUE & BACKGROUND PROCESSING
// =========================================================================
// Laravel-compatible queue system for background job processing
// Webhook logging and notification management

// Background job queue
model Job {
    id          BigInt @id @default(autoincrement()) @db.UnsignedBigInt
    queue       String @db.VarChar(255)
    payload     String @db.LongText
    attempts    Int    @db.UnsignedTinyInt
    reservedAt  Int?   @map("reserved_at") @db.UnsignedInt
    availableAt Int    @map("available_at") @db.UnsignedInt
    createdAt   Int    @map("created_at") @db.UnsignedInt

    @@index([queue])
    @@map("jobs")
}

// Failed job storage and debugging
model FailedJob {
    id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
    uuid       String   @unique @db.VarChar(255)
    connection String   @db.Text
    queue      String   @db.Text
    payload    String   @db.LongText
    exception  String   @db.LongText
    failedAt   DateTime @default(now()) @map("failed_at")

    @@map("failed_jobs")
}